import { Marketplace } from "@3rdweb/contracts";
import { BigNumber, BigNumberish } from "ethers";
import { ModuleType, Role } from "../common";
import { ModuleWithRoles } from "../core/module";
import { IMarketplace } from "../interfaces/modules";
import { AuctionListing, NewAuctionListing, NewDirectListing, Offer } from "../types";
import { DirectListing } from "../types/marketplace/DirectListing";
/**
 * Access this module by calling {@link ThirdwebSDK.getMarketplaceModule}
 * @public
 * @beta
 */
export declare class MarketplaceModule extends ModuleWithRoles<Marketplace> implements IMarketplace {
    static moduleType: ModuleType;
    static roles: readonly ["admin", "lister", "pauser"];
    /**
     * @override
     * @internal
     */
    protected getModuleRoles(): readonly Role[];
    /**
     * @internal
     */
    protected connectContract(): Marketplace;
    /**
     * @internal
     */
    protected getModuleType(): ModuleType;
    createDirectListing(listing: NewDirectListing): Promise<BigNumber>;
    createAuctionListing(listing: NewAuctionListing): Promise<BigNumber>;
    makeDirectListingOffer(offer: {
        listingId: BigNumberish;
        quantityDesired: BigNumberish;
        currencyContractAddress: string;
        pricePerToken: BigNumberish;
    }): Promise<void>;
    private setAllowance;
    makeAuctionListingBid(bid: {
        listingId: BigNumberish;
        pricePerToken: BigNumberish;
    }): Promise<void>;
    isWinningBid(winningPrice: BigNumberish, newBidPrice: BigNumberish, bidBuffer: BigNumberish): Promise<boolean>;
    getDirectListing(listingId: BigNumberish): Promise<DirectListing>;
    getAuctionListing(listingId: BigNumberish): Promise<AuctionListing>;
    /**
     * Helper method maps the auction listing to the direct listing interface.
     *
     * @internal
     * @param listing - The listing to map, as returned from the contract.
     * @returns - The mapped interface.
     */
    private mapDirectListing;
    /**
     * Helper method maps the auction listing to the auction listing interface.
     *
     * @internal
     * @param listing - The listing to map, as returned from the contract.
     * @returns - The mapped interface.
     */
    private mapAuctionListing;
    private handleTokenApproval;
    /**
     * Used to verify fields in new listing.
     * @internal
     */
    private validateNewListingParam;
    /**
     * Throws error if listing could not be found
     *
     * @param listingId - Listing to check for
     */
    private validateDirectListing;
    /**
     * Throws error if listing could not be found
     *
     * @param listingId - Listing to check for
     */
    private validateAuctionListing;
    /**
     * Maps a contract offer to the strict interface
     *
     * @internal
     * @param offer
     * @returns - An `Offer` object
     */
    private mapOffer;
    getActiveOffer(listingId: BigNumberish, address: string): Promise<Offer | undefined>;
    getWinningBid(listingId: BigNumberish): Promise<Offer | undefined>;
    getBidBufferBps(): Promise<BigNumber>;
    getTimeBufferInSeconds(): Promise<BigNumber>;
    acceptDirectListingOffer(listingId: BigNumberish, addressOfOfferor: string): Promise<void>;
    buyoutAuctionListing(listingId: BigNumberish): Promise<void>;
    buyoutDirectListing(_buyout: {
        listingId: BigNumberish;
        quantityDesired: BigNumberish;
    }): Promise<void>;
    updateDirectListing(listing: DirectListing): Promise<void>;
    updateAuctionListing(listing: AuctionListing): Promise<void>;
    cancelDirectListing(listingId: BigNumberish): Promise<void>;
    cancelAuctionListing(listingId: BigNumberish): Promise<void>;
    closeAuctionListing(listingId: BigNumberish, closeFor?: string): Promise<void>;
    setBidBufferBps(buffer: BigNumberish): Promise<void>;
    setTimeBufferInSeconds(buffer: BigNumberish): Promise<void>;
    buyoutListing(listingId: BigNumberish, quantityDesired?: BigNumberish): Promise<void>;
    getListing(listingId: BigNumberish): Promise<AuctionListing | DirectListing>;
    getAllListings(): Promise<(AuctionListing | DirectListing)[]>;
}

import { SignatureMint721 } from "@3rdweb/contracts";
import { TransactionReceipt } from "@ethersproject/providers";
import { BigNumber, BigNumberish } from "ethers";
import { ModuleType, Role } from "../common";
import { NFTMetadata, NFTMetadataOwner } from "../common/nft";
import { ModuleWithRoles } from "../core/module";
import { MetadataURIOrObject } from "../core/types";
import { ITransferable } from "../interfaces/contracts/ITransferable";
import { ISignatureMinter } from "../interfaces/modules/ISignatureMinter";
import { NewSignaturePayload } from "../types/signature-minting/NewSignaturePayload";
import { SignaturePayload } from "../types/signature-minting/SignaturePayload";
/**
 * Access this module by calling {@link ThirdwebSDK.getNFTModule}
 * @public
 */
export declare class NFTModule extends ModuleWithRoles<SignatureMint721> implements ITransferable, ISignatureMinter {
    static moduleType: ModuleType;
    static roles: readonly ["admin", "minter", "transfer"];
    protected getModuleRoles(): readonly Role[];
    /**
     * @internal
     */
    protected connectContract(): SignatureMint721;
    /**
     * @internal
     */
    protected getModuleType(): ModuleType;
    private _shouldCheckVersion;
    private _isV1;
    private v1Contract?;
    /**
     * Check if contract is v1 or v2. If the contract doesn't have nextTokenIdToMint = v1 contract.
     */
    isV1(): Promise<boolean>;
    /**
     * Fetches an NFT from storage with the resolved metadata.
     *
     * @param tokenId - The id of the token to fetch.
     * @returns - The NFT metadata.
     */
    get(tokenId: string): Promise<NFTMetadata>;
    getAll(): Promise<NFTMetadata[]>;
    getWithOwner(tokenId: string): Promise<NFTMetadataOwner>;
    getAllWithOwner(): Promise<NFTMetadataOwner[]>;
    /**
     * Checks the owner of a particular NFT
     *
     * @param tokenId - ID of the NFT to get the owner of
     * @returns the owner of the token, or a zero address if the
     * token has been burned
     */
    ownerOf(tokenId: string): Promise<string>;
    getOwned(_address?: string): Promise<NFTMetadata[]>;
    totalSupply(): Promise<BigNumber>;
    balanceOf(address: string): Promise<BigNumber>;
    balance(): Promise<BigNumber>;
    isApproved(address: string, operator: string): Promise<boolean>;
    setApproval(operator: string, approved?: boolean): Promise<TransactionReceipt>;
    transfer(to: string, tokenId: string): Promise<TransactionReceipt>;
    mint(metadata: MetadataURIOrObject): Promise<NFTMetadata>;
    private _v1MintTo;
    mintTo(to: string, metadata: MetadataURIOrObject): Promise<NFTMetadata>;
    mintBatch(metadatas: MetadataURIOrObject[]): Promise<NFTMetadata[]>;
    private _v1MintBatchTo;
    mintBatchTo(to: string, metadatas: MetadataURIOrObject[]): Promise<NFTMetadata[]>;
    burn(tokenId: BigNumberish): Promise<TransactionReceipt>;
    transferFrom(from: string, to: string, tokenId: BigNumberish): Promise<TransactionReceipt>;
    setRoyaltyBps(amount: number): Promise<TransactionReceipt>;
    setModuleMetadata(metadata: MetadataURIOrObject): Promise<TransactionReceipt>;
    /**
     * Gets the royalty BPS (basis points) of the contract
     *
     * @returns - The royalty BPS
     */
    getRoyaltyBps(): Promise<BigNumberish>;
    /**
     * Gets the address of the royalty recipient
     *
     * @returns - The royalty BPS
     */
    getRoyaltyRecipientAddress(): Promise<string>;
    isTransferRestricted(): Promise<boolean>;
    setRestrictedTransfer(restricted?: boolean): Promise<TransactionReceipt>;
    mintWithSignature(req: SignaturePayload, signature: string): Promise<BigNumber>;
    verify(mintRequest: SignaturePayload, signature: string): Promise<boolean>;
    generateSignatureBatch(payloads: NewSignaturePayload[]): Promise<{
        payload: SignaturePayload;
        signature: string;
    }[]>;
    generateSignature(mintRequest: NewSignaturePayload): Promise<{
        payload: SignaturePayload;
        signature: string;
    }>;
    /**
     * Maps a payload to the format expected by the contract
     *
     * @internal
     *
     * @param mintRequest - The payload to map.
     * @returns - The mapped payload.
     */
    private mapPayload;
    private setAllowance;
}
